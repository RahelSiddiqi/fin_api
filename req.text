API consumer => Must be authorized
    Web
    Mobile
Users => Must be authenticated
    Admin =>
        Record "Payments"

        Create "Transactions"
        View "Transactions"

        Generate reports

    User =>
        View his/her "Transactions"

Use cases =>
    Admin =>
        Can login securely =>
            using email and password
            authenticated using session (browser) or token (mobile)
        Can create new "Transactions" =>
            Inputs =>
                id          : generated     // unique identifier generated by system
                amount      : required      // amount of transaction
                payer_id    : required      // user id for this transaction
                due_on      : required      // must be paid before this date
                vat         : required      // vat in percentage
                is_vat_inc  : required      // is vat included or not
                total_amount: calculated    // will be calculated and store based on vat and is_vat_inc
                total_paid  : calculated    // will be calculated and store based on payments


            today       => 2022-01-10
            --------------------------
            due_date    => 2021-01-10   -> overdue      [due date is in past]
            due_date    => 2021-01-10   -> overdue      [paid part of amount and due date is in past]
            due_date    => 2021-01-10   -> paid         [fully paid]

            due_date    => 2022-01-12   -> outstanding  [no payment made and due date is in future]
            due_date    => 2022-01-12   -> outstanding  [part of payment made and due date is in future]

            if today    => 2022-01-20
            due_date    => 2022-01-12   -> overdue      [no payment or any payment made but due date is in past]

            **
                Note:   status will not be stored
                        but will show status depending on
                            current date
                            paid amount
                        system will calculate status and send with response
                            transaction created
                            transaction viewed
            **
        Can create news "Payments" for any "Transactions" =>
            Inputs =>
                transaction_id  : required      // identify the payment for which transaction
                amount          : required      // amount of payment
                paid_on         : required      // date for this payment
                comment         : optional      // any comment if provided for this payment

            When any payment is made the status will be changed
                recalculated the status and store to table
                    **
                        It conflicts with payment status
                            when user or admin request for transaction status
                            if we save as not calculate the transaction status
                            because suppose we made a partial payment for a transaction today but its due date is tomorrow
                                we update status to outstanding because its not exceed yet
                                but user request the transaction status day after tomorrow when due date is exceed
                                so, if we show from database it will show outstanding while its overdue
                                another way is we need to calculate status when ever the request has made.
        Can view "Transaction" =>
            Acceptance Criteria =>
                All the transactions
                Any specific transaction with payment details
        Can generate monthly reports =>
            Acceptance Criteria =>
                start_date  => date form when
                end_date    => date till when

                response    => Display all paid, outstanding and overdue amounts each month in the date range
                                NOT CLEAR : !!! Each one is relative to the date on which the report is generated !!!
                        [
                            {
                                "month": "1",
                                "year": "2021",
                                "paid": "20000",
                                "outstanding": "1000",
                                "overdue": "10.5"
                            },
                            {
                                "month": "2",
                                "year": "2021",
                                "paid": "0",
                                "outstanding": "1000",
                                "overdue": "5.5"
                            }
                        ]

    User =>
        Can view his "Transaction"
            Acceptance Criteria =>
                All of his/her transaction
                Any of his/her specific transaction with payment details


** Notes **
    1.  Most of the requirements are listed but if you believe something is missing, you can
        either assume it or ask if you believe it might be related to the business.

    2.  Kindly, utilize all the best practices you know in this project. These include principles
        such as SOLID and design patterns ... etc.
